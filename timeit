#!/usr/bin/env python3

# License: MIT
# Author: Ferry Boender <ferry.boender@gmail.com>

import argparse
import subprocess
import time
import datetime
import sys

def cmd(cmd, input=None, env=None):
    """
    Run command `cmd` in a shell. `input` (string) is passed in the
    process' STDIN.

    Returns a dictionary: `{'stdout': <string>, 'stderr': <string>, 'exitcode':
    <int>}`.
    """
    p = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate(input)
    return {
        'stdout': stdout,
        'stderr': stderr,
        'exitcode': p.returncode
    }

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--interval', metavar='SECS', dest='interval', type=int, default=1)
    parser.add_argument('-c', '--count', metavar='TIMES', dest='count', type=int, default=None)
    parser.add_argument('-t', '--trim-output', metavar='CHARS', dest='trim_output', type=int)
    parser.add_argument("command")
    args = parser.parse_args()

    # Print header to stdout
    sys.stdout.write("start_dt\tstart_ts\tduration\texitcode\toutput\n")

    times_ran = 0
    while args.count is None or times_ran < args.count:
        start = time.time()
        res = cmd(args.command)
        end = time.time()

        output = "\\n".join(
            res['stdout']\
                .decode('utf-8', 'replace')\
                .strip()\
                .splitlines()
        )
        if args.trim_output is not None:
            output = output[:args.trim_output]

        sys.stdout.write(
            "{}\t{}\t{:.3f}\t{}\t{}\n".format(
                datetime.datetime.fromtimestamp(start).strftime("%Y-%m-%d %H:%M:%S"),
                int(start),
                end - start,
                res['exitcode'],
                output
            )
        )
        # If we don't flush and user redirects output, output isn't written due to buffering.
        sys.stdout.flush()

        time.sleep(args.interval)
